/******************************************************
*001、Import vector range, import filter APIs
******************************************************/
///1、Scope and display of the study area
Map.addLayer(roi,{color:'red'},'roi',false)
Map.centerObject(roi,12)
///2、Call API
var s2Tools = require("users/nanshany1993/common:sentinel2");
///3、Setting time
var startDay = ee.Date('2021-01-01');
var endDay = ee.Date('2022-01-01');

/******************************************************
*002、Import S2 data, image de-cloud, image cloud filtering
******************************************************/
///1、Load S2 data source
var S2_ndvi =  ee.ImageCollection("COPERNICUS/S2_SR")
              .filterDate(startDay, endDay)
              .filterBounds(roi)
              .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 30))
              .map(function(img) {
              return img.divide(10000)
                          // .select(["B.*",'NDVI'])
                          .clip(roi)
                          .copyProperties(img, img.propertyNames());
              });
///2、S2 de-cloud function
function maskCloudAndShadowsSR(image) {
  var cloudProb = image.select('MSK_CLDPRB');
  var snowProb = image.select('MSK_SNWPRB');
  var cloud = cloudProb.lt(5);
  var snow = snowProb.lt(5);
  var scl = image.select('SCL'); 
  var shadow = scl.eq(3); // 3 = cloud shadow
  var cirrus = scl.eq(10); // 10 = cirrus
  // Cloud probability less than 5% or cloud shadow classification
  var mask = (cloud.and(snow)).and(cirrus.neq(1)).and(shadow.neq(1));
  return image.updateMask(mask)
      .copyProperties(image, ["system:time_start"]);
}
/// 3、Images go to the cloud
var S2_ndvi =S2_ndvi.map(maskCloudAndShadowsSR)
                    .select(['B2'])
print('S2_ndvi',S2_ndvi)

/******************************************************
/003、Create median images in 10-day increments
******************************************************/

///1、Create images with ten-day intervals
var doy = ee.List.sequence(90,300,10);
var ndvi_list =  doy.map(function(num){
                            var before = ee.Number(num).subtract(9);
                            var after = ee.Number(num);
                            var date0 = ee.Number(num);
                            var date = ee.Date(startDay).advance(date0,'day').millis();
                            var date1 = ee.Date(startDay).advance(date0,'day');
                            var S2_ndvi_col = S2_ndvi.filter(ee.Filter.dayOfYear(before,after));
                            return S2_ndvi_col.median()
                                            .set('system:time_start',date)
                                            .set('date',date1);
});
var ndvi_10_col = ee.ImageCollection(ndvi_list)
print('ndvi_10_col',ndvi_10_col)

/******************************************************
/004、linear interpolation
******************************************************/
///1、linear interpolation
// Add a band containing timestamp to each image
// This will be used to do pixel-wise interpolation later
var ndvi_10_col = ndvi_10_col.map(function(image) {
  var timeImage = image.metadata('system:time_start').rename('timestamp')
  // The time image doesn't have a mask. 
  // We set the mask of the time band to be the same as the first band of the image
  var timeImageMasked = timeImage.updateMask(image.mask().select(0))
  return image.addBands(timeImageMasked)
})

// Specify the time-window
// This will determine how much backward and forward are we willing to
// look for an unmasked pixel in the time-series
var days = 30

// For each image in the collection, we need to find all images
// before and after the specified time-window

// This is accomplished using Joins
// We need to do 2 joins
// Join 1: Join the collection with itself to find all images before each image
// Join 2: Join the collection with itself to find all images after each image

// We first define the filters needed for the join

// Define a maxDifference filter to find all images within the specified days
// The filter needs the time difference in milliseconds
// Convert days to milliseconds
var millis = ee.Number(days).multiply(1000*60*60*24)
var maxDiffFilter = ee.Filter.maxDifference({
  difference: millis,
  leftField: 'system:time_start',
  rightField: 'system:time_start'
})

// We need a lessThanOrEquals filter to find all images after a given image
// This will compare the given image's timestamp against other images' timestamps
var lessEqFilter = ee.Filter.lessThanOrEquals({
  leftField: 'system:time_start',
  rightField: 'system:time_start'
})

// We need a greaterThanOrEquals filter to find all images before a given image
// This will compare the given image's timestamp against other images' timestamps
var greaterEqFilter = ee.Filter.greaterThanOrEquals({
  leftField: 'system:time_start',
  rightField: 'system:time_start'
})

// Apply the joins

// For the first join, we need to match all images that are after the given image.
// To do this we need to match 2 conditions
// 1. The resulting images must be within the specified time-window of target image
// 2. The target image's timestamp must be lesser than the timestamp of resulting images
// Combine two filters to match both these conditions
var filter1 = ee.Filter.and(maxDiffFilter, lessEqFilter)
// This join will find all images after, sorted in descending order
// This will gives us images so that closest is last
var join1 = ee.Join.saveAll({
  matchesKey: 'after',
  ordering: 'system:time_start',
  ascending: false})
  
var join1Result = join1.apply({
  primary: ndvi_10_col,
  secondary: ndvi_10_col,
  condition: filter1
})
// Each image now as a property called 'after' containing
// all images that come after it within the time-window
print(join1Result)

// Do the second join now to match all images within the time-window
// that come before each image
var filter2 = ee.Filter.and(maxDiffFilter, greaterEqFilter)
// This join will find all images before, sorted in ascending order
// This will gives us images so that closest is last
var join2 = ee.Join.saveAll({
  matchesKey: 'before',
  ordering: 'system:time_start',
  ascending: true})
  
var join2Result = join2.apply({
  primary: join1Result,
  secondary: join1Result,
  condition: filter2
})

// Each image now as a property called 'before' containing
// all images that come after it within the time-window
print(join2Result)


// Do the interpolation

// We now write a function that will be used to interpolate all images
// This function takes an image and replaces the masked pixels
// with the interpolated value from before and after images.

var interpolateImages = function(image) {
  var image = ee.Image(image)
  // We get the list of before and after images from the image property
  // Mosaic the images so we a before and after image with the closest unmasked pixel
  var beforeImages = ee.List(image.get('before'))
  var beforeMosaic = ee.ImageCollection.fromImages(beforeImages).mosaic()
  var afterImages = ee.List(image.get('after'))
  var afterMosaic = ee.ImageCollection.fromImages(afterImages).mosaic()

  // Interpolation formula
  // y = y1 + (y2-y1)*((t – t1) / (t2 – t1))
  // y = interpolated image
  // y1 = before image
  // y2 = after image
  // t = interpolation timestamp
  // t1 = before image timestamp
  // t2 = after image timestamp
  
  // We first compute the ratio (t – t1) / (t2 – t1)

  // Get image with before and after times
  var t1 = beforeMosaic.select('timestamp').rename('t1')
  var t2 = afterMosaic.select('timestamp').rename('t2')

  var t = image.metadata('system:time_start').rename('t')

  var timeImage = ee.Image.cat([t1, t2, t])

  var timeRatio = timeImage.expression('(t - t1) / (t2 - t1)', {
    't': timeImage.select('t'),
    't1': timeImage.select('t1'),
    't2': timeImage.select('t2'),
  })
  // You can replace timeRatio with a constant value 0.5
  // if you wanted a simple average
  
  // Compute an image with the interpolated image y
  var interpolated = beforeMosaic
    .add((afterMosaic.subtract(beforeMosaic).multiply(timeRatio)))
  // Replace the masked pixels in the current image with the average value
  var result = image.unmask(interpolated)
  return result.unmask(0).clip(roi).copyProperties(image, ['system:time_start'])//add.unmask(0).clip(roi)
}

// map() the function to interpolate all images in the collection
var interpolatedCol = ee.ImageCollection(join2Result.map(interpolateImages))
/******************************************************
*005、filter
******************************************************/
///1、What are the bands for viewing images
// print(interpolatedCol.first(),'Bandname');
//2、滤波
var ndvi_sg = s2Tools.sgsmooth(interpolatedCol,['B2'],2,3)//["B.*",'NDVI']For which bands or indices are filtered
                    // .select(['MOD_NDVI_INTER'],['NDVI'])
                    .map(function(img){
                      var DOY = img.date().format("DDD")
                      return img.set('DOY',DOY)
                    });


var ndvi_sg = ndvi_sg.select('B2').toBands();
print(ndvi_sg,'ljs')
var ndvi_sg =ndvi_sg.select('0_B2').rename('a_B2')
.addBands(ndvi_sg.select('1_B2').rename('b_B2'))
.addBands(ndvi_sg.select('2_B2').rename('c_B2'))
.addBands(ndvi_sg.select('3_B2').rename('d_B2'))
.addBands(ndvi_sg.select('4_B2').rename('e_B2'))
.addBands(ndvi_sg.select('5_B2').rename('f_B2'))
.addBands(ndvi_sg.select('6_B2').rename('g_B2'))
.addBands(ndvi_sg.select('7_B2').rename('h_B2'))
.addBands(ndvi_sg.select('8_B2').rename('i_B2'))
.addBands(ndvi_sg.select('9_B2').rename('j_B2'))
.addBands(ndvi_sg.select('10_B2').rename('k_B2'))
.addBands(ndvi_sg.select('11_B2').rename('l_B2'))
.addBands(ndvi_sg.select('12_B2').rename('m_B2'))
.addBands(ndvi_sg.select('13_B2').rename('n_B2'))
.addBands(ndvi_sg.select('14_B2').rename('o_B2'))
.addBands(ndvi_sg.select('15_B2').rename('p_B2'))
.addBands(ndvi_sg.select('16_B2').rename('q_B2'))
.addBands(ndvi_sg.select('17_B2').rename('r_B2'))
.addBands(ndvi_sg.select('18_B2').rename('s_B2'))
.addBands(ndvi_sg.select('19_B2').rename('t_B2'))
.addBands(ndvi_sg.select('20_B2').rename('u_B2'))
.addBands(ndvi_sg.select('21_B2').rename('v_B2'))
Map.addLayer(ndvi_sg,{},'e_B2')


print(ndvi_sg,'ndvi_sg11')
/******************************************************
*006、Exporting Classified Images
******************************************************/

Export.image.toAsset({
  image: ndvi_sg.toFloat(),
  description: '10_2021S2_B2', // mission statement
  assetId: '10_2021S2_B2', // Asset path
  region: roi, // export region
  scale: 10, // resolution
  maxPixels: 1e13,//Maximum number of pixels exported
});




https://code.earthengine.google.com/4090296898b17176dcb2cf85479bbed1
